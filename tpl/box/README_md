# Streamix Box Implementation `<box_name>`

This is a box implementation to be used in a network described with the
coordination language Streamix.

ADD A DESCRIPTION HERE ...

## Configuration

The following configuration options are possible:

An example configuration can be found in
`/etc/smx/lib<lib_name>__version__/box.json`
where `__version__` stands for the version number (major.minor) of the box.

## Triggers

The box reacts to the following triggers on port PORT_NAME:

## Events

The box generates the following events on port PORT_NAME:

## Signature

The box has the following input ports:

The box has the following output ports:

## Using the library

When a box `<box_name>` is spawned as a net in a Streamix network, the box must
be marked as `extern` in the Streamix code and the application must be compiled
with `-l<lib_name>` (add this to the `EXT_LIBS` variable in the app Makefile).

## Compiling and Installing

A Makefile is provided that allows to
 - compile the box implementation to a library `lib<lib_name>` (`make`)
 - create `deb` packages including the library, this document, and the default
   configuration file (`make dpkg`)
 - manually install to the target folders (`sudo make install`)

## Building a Debian Package

The following dependencies are required to build a debian package:

```sh
sudo apt install git-buildpackage
sudo apt install git debhelper
```

Make sure to have the `-dev`-packages of all message library dependencies of
this Streamix box implementation installed.

Run the following command to build a debian package from the current version.
Make sure you are on the master branch and the box version in the file
`config.mk` is set correctly.

```sh
smx_build_lib_package.sh
```

Not that this script will create several branches and tags as well as
generating the debian changelog. To build a package from a debian branch first
checkout the branch of the version you want to build and then run the following
command:

```sh
gbp buildpackage --git-export-dir=dpkg --git-upstream-tag='v%(version)s' --git-debian-branch=$(git rev-parse --abbrev-ref HEAD) --git-submodules -uc -us
```

For ease of use this command is wrapped by the script

```sh
smx_gbp_buildpackage.sh
```

## Reproducing the Source with pristine-tar

Every version can be reproduced with `pristine-tar`.
First rename the pristine-tar branch of the target version (e.g. version 0.5.1`):

```sh
git branch -m pristine-tar_0.5 pristine-tar
```

Then generate the source. Note that the name of the output file must match the
name of the files in the pristine-tar branch.

```sh
pristine-tar checkout <lib_name>__pkg_version__.orig.tar.gz
```

where `__pkg_version__` is of the form `major.minor_major.minor.revision`. With
our example from above this results in `<lib_name>0.5_0.5.1.orig.tar.gz`.

## Testing

The folder `test` contains a testing environment.
In order set up test the following steps must be taken:
 1. Add test data to the node `test_data` in the configuration file `test.json`.
 2. Describe the data conversion from JSON data to Streamix messages in the
    function `<box_name>_in_data_conversion()` of the file `test_<box_name>.c`.
 3. Describe the data conversion from a Streamix messages to JSON data and
    evaluate the result in the function `<box_name>_out_data_conversion()` of
    the file `test_<box_name>.c`.
 4. Compile the program with the command `make`.
 5. Run the test with either of the following commands
   - `./<box_name>`
   - `make run`.
