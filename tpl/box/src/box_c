/**
 * @author  <author>
 *
 * The implementation of the streamix box <box_name>.
 */

#include "smxrts.h"
#include "<box_name>.h"
#ifdef SMX_TESTING
#include "test_<box_name>.h"
#endif /* SMX_TESTING */

#ifndef LIB_<box_name>_VERSION
#define LIB_<box_name>_VERSION "undefined"
#endif

/******************************************************************************/
int <box_name>( void* h, void* state )
{
    ( void )( h );
    ( void )( state );

    // PERFORM READ AND WRITE OPERATIONS ACCORDING TO THE NET SIGNATURE

    // use SMX_NET_RETURN to run the thread in a loop
    return SMX_NET_END;
}

/******************************************************************************/
void <box_name>_cleanup( void* h, void* state )
{
    ( void )( h );

    if( state == NULL )
        return;

    // FREE THE FIELDS OF THE STATE VARIABLE

    free( state );
}

/******************************************************************************/
const char* <box_name>_get_version()
{
    return LIB_<box_name>_VERSION;
}

/******************************************************************************/
int <box_name>_init( void* h, void** state )
{
    ( void )( h );
    *state = smx_malloc( sizeof( struct <box_name>_state_s ) );
    if( *state == NULL )
        return -1;

    SMX_LOG( h, notice, "using box '<box_name>' version: v%s",
            LIB_<box_name>_VERSION );

    // INITIALIZE THE STATE VARIABLE FIELDS

    return 0;
}

/******************************************************************************/
/* DO NOT MODIFY!                                                             */
/******************************************************************************/
void* start_routine_<box_name>( void* h )
{
    return START_ROUTINE_NET( h, <box_name> );
}
