/**
 * @author  ADD AUTHOR NAME
 * @file    test_<box_name>.h
 *
 * This file holds custom definitions for the streamix box <box_name> in order
 * to perform testing.
 */

#include <bson.h>
#include "smxtypes.h"
#include "<box_name>_sig.h"

#ifndef BOX_TEST_<box_name>_H
#define BOX_TEST_<box_name>_H

#include <zlog.h>

enum {
    ZLOG_LEVEL_TEST = 10,
};

#define zlog_test(cat, format, ...) \
    zlog(cat, __FILE__, sizeof(__FILE__)-1, \
    __func__, sizeof(__func__)-1, __LINE__, \
    ZLOG_LEVEL_TEST, format, ## __VA_ARGS__)

/**
 * This function converts input test data provided in the configuration file
 * into a c format the box implementation will be able to accept.
 *
 * @param h
 *  The net handler.
 * @param data
 *  The test data for a specific input port.
 * @param idx
 *  The index of the port for which the conversion is performed.
 * @return
 *  A newly allocated streamix message.
 */
smx_msg_t* <box_name>_in_data_conversion( void* h, const bson_value_t* data,
        ports_<box_name>_in_t idx );

/**
 * This function converts output test data provided in the configuration file
 * into a c format and compares it to the data prodced by the box
 * implementation.
 *
 * @param h
 *  The net handler.
 * @param data
 *  The test data for a specific input port.
 * @param idx
 *  The index of the port for which the conversion is performed.
 * @param msg
 *  The message produced by the box implementation.
 * @return
 *  0 to simulate success, -1 to simulate failure
 */
int <box_name>_out_data_conversion( void* h, const bson_value_t* data,
        ports_<box_name>_out_t idx, smx_msg_t* msg );

#endif
