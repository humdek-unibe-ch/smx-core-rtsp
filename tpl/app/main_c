/**
 * @file <app_name>.c
 *
 * THIS FILE WAS GENERATED BY THE STREAMIX TOOL `smxtrsp`. DO NOT EDIT THIS
 * FILE EDIT THE ORIGINAL STREAMIX-SOURCE FILE `<app_name>.smx` INSTEAD!
 *
 * ALL CHANGES MADE TO THIS FILE WILL BE OVERWRITTEN WHEN RECOMPILING THE
 * STREAMIX-SOURCE FILE!
 *
 * The main file which builds the streamix network and starts each net.
 */

#ifndef APP_VERSION
#define APP_VERSION "unknown"
#endif

#ifndef LIB_VERSION
#define LIB_VERSION "unknown"
#endif

#include <time.h>
#include <unistd.h>
#include "smxrts.h"
<app_includes>

#define LOG_APP_CONFIG_PATH "app.zlog"
#define LOG_SYS_CONFIG_PATH "<conf_path>/<bin_name>" LIB_VERSION "/" LOG_APP_CONFIG_PATH
#define LOG_GLOBAL_CONFIG_PATH "<conf_path>/default.zlog"
#define JSON_APP_CONFIG_PATH "app.json"
#define JSON_SYS_CONFIG_PATH "<conf_path>/<bin_name>" LIB_VERSION "/" JSON_APP_CONFIG_PATH
#define ENV_VAR "SMX_LOG_PREFIX"

int main( int argc, char **argv )
{
    int c;
    char* app_conf_file = NULL;
    char* log_conf_file = NULL;
    char env_time[100];
    char env_var[200];
    time_t now = time( NULL );
    struct tm *local_time = localtime( &now );

    strftime( env_time, sizeof( env_time ) - 1, "%FT%T", local_time );
    sprintf( env_var, "%s=%s", ENV_VAR, env_time );

    putenv( env_var );

    if( access( LOG_APP_CONFIG_PATH, F_OK ) != -1 )
        log_conf_file = LOG_APP_CONFIG_PATH;
    else if( access( LOG_SYS_CONFIG_PATH, F_OK ) != -1 )
        log_conf_file = LOG_SYS_CONFIG_PATH;
    else if( access( LOG_GLOBAL_CONFIG_PATH, F_OK ) != -1 )
        log_conf_file = LOG_GLOBAL_CONFIG_PATH;
    else
        fprintf( stderr, "warning: no default log config file found\n" );

    if( access( JSON_APP_CONFIG_PATH, F_OK ) != -1 )
        app_conf_file = JSON_APP_CONFIG_PATH;
    else if( access( JSON_SYS_CONFIG_PATH, F_OK ) != -1 )
        app_conf_file = JSON_SYS_CONFIG_PATH;
    else
        fprintf( stderr, "warning: no default app config file found\n" );

    while( ( c = getopt( argc, argv, "hvc:l:" ) ) != -1 )
        switch( c ) {
            case 'h':
                printf( "Usage:\n  %s [OPTION...]\n\n", argv[0] );
                printf( "Options:\n" );
                printf( "  -h            This message.\n" );
                printf( "  -v            The version of the application.\n" );
                printf( "  -c 'FILE'     App configuration file to be passed to the application.\n" );
                printf( "                If no file is specified the application falls back to:\n" );
                printf( "                 1. '%s' in the application root\n", JSON_APP_CONFIG_PATH );
                printf( "                 2. '%s'\n", JSON_SYS_CONFIG_PATH );
                printf( "  -l 'FILE'     Log configuration file to be passed to the application.\n" );
                printf( "                If no file is specified the application falls back to:\n" );
                printf( "                 1. '%s' in the application root\n", LOG_APP_CONFIG_PATH );
                printf( "                 2. '%s'\n", LOG_SYS_CONFIG_PATH );
                printf( "                 3. '%s'\n", LOG_GLOBAL_CONFIG_PATH );
                return 0;
            case 'v':
                printf( "%s v%s\n", argv[0], APP_VERSION );
                return 0;
            case 'c':
                app_conf_file = optarg;
                break;
            case 'l':
                log_conf_file = optarg;
                break;
            case '?':
                if( optopt == 'c' )
                    fprintf ( stderr, "Option -%c requires an argument.\n",
                            optopt );
                else
                    fprintf ( stderr, "Unknown option character `\\x%x'.\n",
                            optopt );
                return 1;
            default:
                abort();
        }

    smx_rts_t* rts = smx_program_init( app_conf_file, log_conf_file );

    <smx_network>

    smx_program_cleanup( rts );
}
