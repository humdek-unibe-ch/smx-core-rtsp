/**
 * @file <app_name>.c
 *
 * THIS FILE WAS GENERATED BY THE STREAMIX TOOL `smxtrsp`. DO NOT EDIT THIS
 * FILE EDIT THE ORIGINAL STREAMIX-SOURCE FILE `<app_name>.smx` INSTEAD!
 *
 * ALL CHANGES MADE TO THIS FILE WILL BE OVERWRITTEN WHEN RECOMPILING THE
 * STREAMIX-SOURCE FILE!
 *
 * The main file which builds the streamix network and starts each net.
 */

#ifndef APP_VERSION
#define APP_VERSION "unknown"
#endif

#ifndef LIB_VERSION
#define LIB_VERSION "unknown"
#endif

#include <time.h>
#include <unistd.h>
#include <getopt.h>
#include "smxrts.h"
<app_includes>

#define LOG_APP_CONFIG_PATH "app.zlog"
#define LOG_SYS_CONFIG_PATH "<conf_path>/<bin_name>" LIB_VERSION "/" LOG_APP_CONFIG_PATH
#define LOG_GLOBAL_CONFIG_PATH "<conf_path>/default.zlog"
#define JSON_APP_CONFIG_PATH "app.json"
#define JSON_SYS_CONFIG_PATH "<conf_path>/<bin_name>" LIB_VERSION "/" JSON_APP_CONFIG_PATH
#define ENV_VAR_SMX "SMX_LOG_PREFIX"
#define ENV_VAR_VERSION "SMX_LIB_VERSION"
#define ENV_VAR_ZLOG "ZLOG_PROFILE_ERROR"
#define ZLOG_PATH "/var/log/smx"

void print_usage( const char* name )
{
    printf( "Usage:\n  %s [OPTION...]\n\n", name );
    printf( "Options:\n" );
    printf( "  -h, --help            This this message and exit.\n" );
    printf( "  -v, --version         "
            "Display the version of the application and exit.\n" );

    printf( "  -c, --conf=FILE       "
            "App configuration file to be passed to the application.\n" );
    printf( "                        "
            "If no file is specified the application falls back to:\n" );
    printf( "                        "
            " 1. '%s' in the application root\n", JSON_APP_CONFIG_PATH );
    printf( "                        "
            " 2. '%s'\n", JSON_SYS_CONFIG_PATH );

    printf( "  -l, --log=FILE        "
            "Log configuration file to be passed to the application.\n" );
    printf( "                        "
            "If no file is specified the application falls back to:\n" );
    printf( "                        "
            " 1. '%s' in the application root\n", LOG_APP_CONFIG_PATH );
    printf( "                        "
            " 2. '%s'\n", LOG_SYS_CONFIG_PATH );
    printf( "                        "
            " 3. '%s'\n", LOG_GLOBAL_CONFIG_PATH );

    printf( "  -m, --map=FILE        "
            "Key-value maps to modify the app configuration. To pass\n"
            "                        "
            "multiple maps, use this argument multiple times.\n" );

    printf( "  -a, --arg-file=FILE   "
            "A JSON file to be stored in the RTS state which can be\n"
            "                        "
            "accessed read-only by all nets. This can be used to set\n"
            "                        "
            "the 'experiment_id' and the 'lab_id' of the experiment.\n" );

    printf( "  -A, --arg-string=STR  "
            "The same as '--arg-file' but here a JSON string is\n"
            "                        "
            "passed. This takes precedent over '--arg-file'.\n" );
}

int main( int argc, char **argv )
{
    int c, map_count = 0, option_index = 0;
    const char* app_conf_file = NULL;
    const char* app_conf_maps[100];
    const char* arg_str = NULL;
    const char* arg_file = NULL;
    char* log_conf_file = NULL;
    char env_time[100];
    char env_var_smx[200];
    char env_var_version[200];
    char env_var_log[200];
    time_t now = time( NULL );
    struct tm *local_time = localtime( &now );
    struct option long_options[] = {
        { "help",            no_argument,       0, 'h' },
        { "version",         no_argument,       0, 'v' },
        { "conf",            required_argument, 0, 'c' },
        { "log",             required_argument, 0, 'l' },
        { "map",             required_argument, 0, 'm' },
        { "arg-file",        required_argument, 0, 'a' },
        { "arg-string",      required_argument, 0, 'A' },
        { 0,                 0,                 0,  0  }
    };

    strftime( env_time, sizeof( env_time ) - 1, "%FT%T", local_time );
    sprintf( env_var_smx, "%s=%s", ENV_VAR_SMX, env_time );
    putenv( env_var_smx );

    sprintf( env_var_version, "%s=%s", ENV_VAR_VERSION, LIB_VERSION );
    putenv( env_var_version );

    sprintf( env_var_log, "%s=%s/%s.<app_name>.%d.zlog.error.log", ENV_VAR_ZLOG, ZLOG_PATH,
            env_time, getpid() );
    putenv( env_var_log );

    if( access( LOG_APP_CONFIG_PATH, F_OK ) != -1 )
        log_conf_file = LOG_APP_CONFIG_PATH;
    else if( access( LOG_SYS_CONFIG_PATH, F_OK ) != -1 )
        log_conf_file = LOG_SYS_CONFIG_PATH;
    else if( access( LOG_GLOBAL_CONFIG_PATH, F_OK ) != -1 )
        log_conf_file = LOG_GLOBAL_CONFIG_PATH;
    else
        fprintf( stderr, "warning: no default log config file found\n" );

    if( access( JSON_APP_CONFIG_PATH, F_OK ) != -1 )
        app_conf_file = JSON_APP_CONFIG_PATH;
    else if( access( JSON_SYS_CONFIG_PATH, F_OK ) != -1 )
        app_conf_file = JSON_SYS_CONFIG_PATH;
    else
        fprintf( stderr, "warning: no default app config file found\n" );

    while( 1 )
    {
        option_index = 0;
        c = getopt_long( argc, argv, "hvc:l:m:a:A:", long_options,
                &option_index );
        if( c == -1 )
        {
            break;
        }

        switch( c ) {
            case 'h':
                print_usage( argv[0] );
                return 0;
            case 'v':
                printf( "%s-v%s\n", argv[0], APP_VERSION );
                return 0;
            case 'c':
                app_conf_file = optarg;
                break;
            case 'l':
                log_conf_file = optarg;
                break;
            case 'm':
                app_conf_maps[map_count] = optarg;
                map_count++;
                break;
            case 'a':
                arg_file = optarg;
                break;
            case 'A':
                arg_str = optarg;
                break;
            case '?':
                break;
            default:
                abort();
        }
    }

    smx_rts_t* rts = smx_program_init( app_conf_file, log_conf_file,
            app_conf_maps, map_count, arg_file, arg_str );

    <smx_network>

    smx_program_cleanup( rts );
}
