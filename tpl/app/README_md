# Streamix Application `<app_name>`

This application ...

## Table of Content

- [Configuration](#1-configuration)
- [Network](#2-network)
- [Usage](#3-usage)
- [Compiling and Installing](#4-compiling-and-installing)
- [Building a Debian Package](#5-building-a-debian-package)

## 1. Configuration

In general, a configuration file is of the following form:

```json
{
    "_name": "<app_name>",
    "_log": "app.zlog",
    "_nets": {
        "_default": {
            "profiler": false,
            "config": {}
        },
        "<box_name>": {
            "_default": {
                "profiler": null,
                "config": null
            },
            "<net_name>": {
                "_default": {
                    "profiler": null,
                    "config": null
                },
                "<net_id>": {
                    "profiler": null,
                    "config": null
                }
            }
        }
    }
}
```

The keys `<box_name>`, `<net_name>`, and `<net_id>` are replicated for all
corresponding elements as defined in the Streamix network `<app_name>.smx`.

The configuration options are split into two parts:
 1. The box-specific configuration which is defined in a `config` key. The box
    configuration depends on the box implementation. Refer to the respective
    box documentation to learn more. The key `config` either accepts
    - an object defining the configuration options of the respective net
      instance.
    - a string pointing to the file location of a net configuration file.
 2. General configuration options valid for every net. Currently the following
    options are available:
    - `profiler`: if set to `true` profile messages will be written to a
      [lttng](https://lttng.org/docs/v2.10/#doc-controlling-tracing) tracer
      (if one is set up). If set to `false` the profiler is disabled for this
      net.

Note that the configuration file is hierarchical. Always the most specific
configuration for a net instance is chosen. I.e. in the following list the
configuration is used which matches with
 1. the net instance id (`_nets.<box_name>.<net_name>.<net_id>`)
 2. the net instance name (`_nets.<box_name>.<net_name>._default`)
 3. the net instance box type (`<_nets>.<box_name>._default`)
 4. any net instance (`_nets._default`)

An example configuration of this application can be found in
`/etc/smx/<app_name>-__version__/app.json` where `__version__` stand for the
version number (major.minor) of the application.

[Back to top](#streamix-application-<app_name>)

## 2. Network

The application network is described in `<app_name>.smx` using the syntax of
the coordination language Streamix. Refer to the configuration file
`/opt/smx/conf/<app_name>.json` for a list of all nets used in the network.

[Back to top](#streamix-application-<app_name>)

## 3. Usage

```
Usage:
  ./<app_name> [OPTION...]

Options:
  -h, --help            This this message and exit.
  -v, --version         Display the version of the application and exit.
  -c, --conf=FILE       App configuration file to be passed to the application.
                        If no file is specified the application falls back to:
                         1. 'app.json' in the application root
                         2. '/etc/smx/<bin_name><pkg_version>/app.json'
  -l, --log=FILE        Log configuration file to be passed to the application.
                        If no file is specified the application falls back to:
                         1. 'app.zlog' in the application root
                         2. '/etc/smx/<bin_name><pkg_version>/app.zlog'
                         3. '/etc/smx/default.zlog'
  -m, --map=FILE        Key-value maps to modify the app configuration. To pass
                        multiple maps, use this argument multiple times.
  -a, --arg-file=FILE   A JSON file to be stored in the RTS state which can be
                        accessed read-only by all nets. This can be used to set
                        the 'experiment_id' and the 'lab_id' of the experiment.
  -A, --arg-string=STR  The same as '--arg-file' but here a JSON string is
                        passed. This takes precedent over '--arg-file'.
```

[Back to top](#streamix-application-<app_name>)

## 4. Compiling and Installing

A Makefile is provided with the following commands (among others):
 - `make`: compile the app and all local box implementations to an executable
   `<app_name>`. Note that all local box implementations are linked statically
   while external ones (marked with `extern` in Streamix) are linked
   dynamically.
 - `make dpkg`: create a `deb` package including the binary, this document, and
   the default configuration file.
 - `sudo make install`: manually install to the target folders
 - `sudo make uninstall`: manually remove the app files from to the target
   folders

[Back to top](#streamix-application-<app_name>)

## 5. Building a Debian Package

The following dependencies are required to build a debian package:

```sh
sudo apt install git-buildpackage
sudo apt install git debhelper
```

Make sure to have the `-dev`-packages of all box and message library
dependencies of this Streamix application installed.

Run the following command to build a debian package from the current version.
Make sure you are on the master branch and the app version in the file
`config.mk` is set correctly.

```sh
smx_build_bin_package.sh
```

Note that this script will create several branches and tags as well as
generating the debian changelog.

[Back to top](#streamix-application-<app_name>)

### 5.1. Building a Debian Package from a Branch

To build a package from a debian branch first checkout the branch of the
version you want to build and then run the following command:

```sh
gbp buildpackage --git-export-dir=dpkg --git-upstream-tag='v%(version)s' --git-debian-branch=$(git rev-parse --abbrev-ref HEAD) --git-submodules -uc -us
```

For ease of use this command is wrapped by the script

```sh
smx_gbp_buildpackage.sh
```

[Back to top](#streamix-application-<app_name>)

### 5.2 Reproducing the Source with pristine-tar

Every version can be reproduced with `pristine-tar`.
First rename the pristine-tar branch of the target version (e.g. version 0.5.1`):

```sh
git branch -m pristine-tar_0.5 pristine-tar
```

Then generate the source. Note that the name of the output file must match the
name of the files in the pristine-tar branch.

```sh
pristine-tar checkout <app_name><pkg_version>.orig.tar.gz
```

where `<pkg_version>` is of the form `major.minor_major.minor.revision`. With
our example from above this results in `<app_name>0.5_0.5.1.orig.tar.gz`.

[Back to top](#streamix-application-<app_name>)
